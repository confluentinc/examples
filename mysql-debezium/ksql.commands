--set 'auto.offset.reset'='earliest';

--We need to identify fields in schema, even with Avro, because this is a script (https://github.com/confluentinc/ksql/issues/1031)
CREATE STREAM CUSTOMERS_SRC (id INTEGER, FIRST_NAME VARCHAR, LAST_NAME VARCHAR, EMAIL VARCHAR, GENDER VARCHAR, COMMENTS VARCHAR, MESSAGETOPIC VARCHAR, MESSAGESOURCE VARCHAR) WITH (KAFKA_TOPIC='asgard.demo.customers', VALUE_FORMAT='AVRO');
--Re-key the customer data
CREATE STREAM CUSTOMERS_SRC_REKEY WITH (PARTITIONS=4) AS SELECT * FROM CUSTOMERS_SRC PARTITION BY ID;

--Define customer TABLE
CREATE TABLE CUSTOMERS (id INTEGER, FIRST_NAME VARCHAR, LAST_NAME VARCHAR, EMAIL VARCHAR, GENDER VARCHAR, COMMENTS VARCHAR, MESSAGETOPIC VARCHAR, MESSAGESOURCE VARCHAR) WITH (KAFKA_TOPIC='CUSTOMERS_SRC_REKEY', VALUE_FORMAT ='AVRO', KEY='ID');

--Define ratings STREAM
--We need to identify fields in schema, even with Avro, because this is a script (https://github.com/confluentinc/ksql/issues/1031)
CREATE STREAM RATINGS (RATING_ID BIGINT, USER_ID INTEGER, STARS INTEGER, ROUTE_ID INTEGER, RATING_TIME BIGINT, CHANNEL VARCHAR, MESSAGE VARCHAR) WITH (KAFKA_TOPIC='ratings',VALUE_FORMAT='AVRO');

--Join live stream of ratings to customer data
CREATE STREAM RATINGS_ENRICHED AS SELECT R.RATING_ID, R.CHANNEL, R.MESSAGE, C.ID, C.FIRST_NAME + ' ' + C.LAST_NAME AS FULL_NAME FROM RATINGS R LEFT JOIN CUSTOMERS C ON R.USER_ID = C.ID WHERE C.FIRST_NAME IS NOT NULL ;

--Simple aggregation - count of ratings per person, per minute
CREATE TABLE RATINGS_PER_CUSTOMER_PER_MINUTE AS SELECT FULL_NAME,COUNT(*) AS RATINGS_COUNT FROM RATINGS_ENRICHED WINDOW TUMBLING (SIZE 1 MINUTE) GROUP BY FULL_NAME;
