############################################################
# For the replicator example we need a larger source cluster
# to simulate a real world workload to sync to CCloud
GKE_BASE_NUM_NODES := 7
GKE_BASE_ZOOKEEPER_REPLICAS := 3
GKE_BASE_KAFKA_REPLICAS := 3
############################################################

REPLICATOR_GKE_CC_MKFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
REPLICATOR_GKE_CC_MKFILE_DIR := $(dir $(REPLICATOR_GKE_CC_MKFILE_PATH))

GKE_BASE_ADDITIONAL_HELM_FLAGS := -f $(REPLICATOR_GKE_CC_MKFILE_DIR)cfg/my-values.yaml --set connect.dependencies.kafka.brokerCount=3 --set controlcenter.dependencies.c3KafkaCluster.brokerCount=3

include $(THIS_MKFILE_DIR)../gke-base/Makefile-impl

###### REPLICATOR MANAGEMENT ######
#replicator-gke-cc-deploy-replicator: #_ Deploys Replicator into the configured k8s cluster
#	@$(call echo_stdout_header,Deploy Replicator)
#	helm upgrade --install --namespace operator --set replicator.enabled=true $(GKE_BASE_HELM_COMMON_FLAGS) replicator $(OPERATOR_PATH)helm/confluent-operator
#	@$(call echo_stdout_footer_pass,Replicator deployed)
#
#replicator-gke-cc-wait-for-replicator: #_ Waits until the Replicator rollout is complete
#	@$(call echo_stdout_header,Wait for Replicator)
#	source $(COMMON_MKFILE_DIR)bin/retry.sh; retry 15 kubectl --context $(GKE_BASE_KUBECTL_CONTEXT) -n operator get sts replicator 
#	kubectl --context $(GKE_BASE_KUBECTL_CONTEXT) -n $(GKE_BASE_KUBECTL_NAMESPACE) rollout status statefulset/replicator
#	@$(call echo_stdout_footer_pass,Replicator ready)
#
#replicator-gke-cc-destroy-replicator: #_ Purge the Replicator package 
#	@$(call echo_stdout_header,Purge the Replicator package)
#	-helm delete --purge replicator
#	@$(call echo_stdout_footer_pass,Replicator purged)
#
#replicator-gke-cc-wait-for-replicator-destruction: #_ Waits until the Replicator cluster is destroyed
#	@$(call echo_stdout_header,Ensure Replicator destroyed)
#	-kubectl --context $(GKE_BASE_KUBECTL_CONTEXT) -n $(GKE_BASE_KUBECTL_NAMESPACE) wait --timeout=60s --for=delete statefulset/replicator
#	@$(call echo_stdout_footer_pass,Replicator gone)
#################################

##### REPLICATOR DEPLOY JOB #####
#replicator-gke-cc-deploy-replicator-deploy-job: #_ Deploys A Replicator Configuration into the Replicator worker using a K8s Job
#	@$(call echo_stdout_header,Deploy Replicator Deploy Job)
##helm upgrade --install --namespace operator -f $(REPLICATOR_GKE_CC_MKFILE_DIR)cfg/values.yaml --set replicator.enabled=true $(GKE_BASE_HELM_COMMON_FLAGS) replicator $(OPERATOR_PATH)helm/confluent-operator
#	@$(call echo_stdout_footer_pass,Replicator Deploy Job deployed)
#
#replicator-gke-cc-destroy-replicator: #_ Purge the Replicator package 
#	@$(call echo_stdout_header,Purge the Replicator package)
#	-helm delete --purge replicator
#	@$(call echo_stdout_footer_pass,Replicator purged)

#replicator-gke-cc-wait-for-replicator-destruction: #_ Waits until the Replicator cluster is destroyed
#	@$(call echo_stdout_header,Ensure Replicator destroyed)
#	-kubectl --context $(GKE_BASE_KUBECTL_CONTEXT) -n $(GKE_BASE_KUBECTL_NAMESPACE) wait --timeout=60s --for=delete statefulset/replicator
#	@$(call echo_stdout_footer_pass,Replicator gone)
#################################

##### C3 DEPLOY JOB ##########################################
# These are additive to the gke-base functions to manage C3
# 	and adds the user provided Confluent Cloud cluster
#		configuration to C3.	

##############################################################

replicator-gke-cc-demo:
	@make --no-print-directory gke-base-demo
	@make --no-print-directory gke-base-deploy-stock-trades-connector
	@make --no-print-directory replicator-gke-cc-deploy-replicator
	@make --no-print-directory replicator-gke-cc-wait-for-replicator
	@echo
	@$(call echo_pass,Replicator GKE->CC Demo running)

replicator-gke-cc-destroy-demo:
	@make --no-print-directory replicator-gke-cc-destroy-replicator
	@make --no-print-directory replicator-gke-cc-wait-for-replicator-destruction
	@make --no-print-directory gke-base-destroy-demo

